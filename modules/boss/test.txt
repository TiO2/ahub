worker_processes 1;
#error_log /var/log/nginx/error.log debug;

events { worker_connections 1024; }

http {
    proxy_cache_path cache/  keys_zone=auth_cache:10m;
    client_max_body_size 8m;
    ignore_invalid_headers off;
    sendfile on;
    #rewrite_log on;
    gzip off;

    log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request - uri: $uri - args: $args';
    access_log  /var/log/nginx/access.log upstreamlog;

    server {
        listen 80;
        
        # Pass this particular URL off to certbot, to authenticate HTTPS certificates
        location ~ /.well-known/acme-challenge(?<path>.+) {
            resolver 127.0.0.11;
            set $certbot_acme certbot:80;
            default_type "text/plain";
            proxy_pass http://$certbot_acme$request_uri;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;

        ssl_certificate         /etc/letsencrypt/live/ahub.westeurope.cloudapp.azure.com/fullchain.pem;
        ssl_certificate_key     /etc/letsencrypt/live/ahub.westeurope.cloudapp.azure.com/privkey.pem;

        location / {

            # challenge authorization
            auth_request /auth-proxy;

            # redirect 401 to login form
            error_page 401 =200 /login;

            proxy_pass http://localhost:8000;
            proxy_redirect off;
         }

        location /auth-proxy {
            resolver            127.0.0.11;
            set $aadauth        aadauth:8000;
            internal;
            proxy_pass http://$aadauth/auth-proxy;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_cache auth_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_key "$http_authorization$cookie_nginxauth";
        }

        location /login {
            resolver            127.0.0.11;
            set $aadauth        aadauth:8000;
            internal;
            proxy_pass http://$aadauth$uri?$args;
            proxy_set_header X-Target $scheme://$host$request_uri;
        }

        location /authorize {
            resolver            127.0.0.11;
            set $aadauth        aadauth:8000;
            proxy_pass http://$aadauth$uri?$args;
        }

#SERVICEBLOCK

#NODEBLOCK

    }

    server {
        listen 8000;

        location ~ /gui(?<path>.*) {
            resolver            127.0.0.11;
            set $gui            gui:8000;
            #proxy_set_header    Accept-Encoding "";
            #sub_filter_once     off;
            #sub_filter          'src="/'    'src="./';
            #sub_filter          'href="/'   'href="./';

            proxy_pass          http://$gui$path?$args;
        }

        location ~ /boss(?<path>.*) {
            resolver            127.0.0.11;
            set $boss           boss:8000;
            proxy_pass          http://$boss$path?$args;
        }

        location ~ /certbot(?<path>.*) {
            resolver            127.0.0.11;
            set $certbot        certbot:8000;
            proxy_pass          http://$certbot$path?$args;
        }

        location ~ /portainer(?<path>.*) {
             auth_basic         off;
             resolver           127.0.0.11;
             set $portainer     portainer:9000;
             proxy_pass         http://$portainer$path?$args;
             proxy_http_version 1.1;
             proxy_set_header   Host               $host:$server_port;
             proxy_set_header   X-Real-IP          $remote_addr;
             proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
             proxy_set_header   X-Forwarded-Proto  $scheme;
             proxy_set_header   Upgrade            $http_upgrade;
             proxy_set_header   Connection         "upgrade";
        }


        location /node2/ {
            proxy_pass          http://node2:8000/;
            proxy_redirect     http://node2:8000/ /;
        }
        location /node3/ {
            proxy_pass          http://node3:8000/;
            proxy_redirect     http://node3:8000/ /;
        }
        location /node1/ {
            proxy_pass          http://node1:8000/;
            proxy_redirect     http://node1:8000/ /;
        }

    }
}
